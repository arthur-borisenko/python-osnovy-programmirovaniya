WEBVTT

1
00:00:00.000 --> 00:00:06.063
[ЗВУК] Итак,

2
00:00:06.063 --> 00:00:10.670
как я говорил, программирование — это

3
00:00:10.670 --> 00:00:15.510
наука практическая,
так что сразу перейдем к практике.

4
00:00:15.510 --> 00:00:19.806
Вот сейчас перед нами окошко
PyCharm Community Edition — это среда

5
00:00:19.806 --> 00:00:22.880
программирования, в
которой мы будем работать.

6
00:00:22.880 --> 00:00:24.926
Здесь нужно создать новый проект.

7
00:00:24.926 --> 00:00:29.354
Если у вас другая среда, то там,
может быть, какие-то отличия есть, но,

8
00:00:29.354 --> 00:00:31.265
в принципе, все довольно похоже.

9
00:00:31.265 --> 00:00:35.844
Нажимаем Create New Project, выбираем
имя — на всякий случай лучше запомнить,

10
00:00:35.844 --> 00:00:39.320
чтоб вы знали,
где искать свои файлы — и нажимаем Create.

11
00:00:39.320 --> 00:00:45.286
Вот создался пустой проект, сейчас

12
00:00:45.286 --> 00:00:50.010
здесь пока ничего нету, а чтобы здесь
что-то появилось, нужно создать файл.

13
00:00:50.010 --> 00:00:56.390
Правой кнопкой нажимаем на название
нашего проекта или File, New File.

14
00:00:56.390 --> 00:00:58.540
New — и нам нужен Python File.

15
00:00:58.540 --> 00:01:03.940
Собственно, это файл с кодом,
в котором будет находиться наша программа.

16
00:01:03.940 --> 00:01:07.240
Даем ему какое-нибудь
название и нажимаем OK.

17
00:01:07.240 --> 00:01:11.102
И все, теперь у нас есть
текстовое окошко — можно считать,

18
00:01:11.102 --> 00:01:13.154
что это просто текстовый редактор,

19
00:01:13.154 --> 00:01:16.800
только специально приспособленный
для написания программ на Питоне.

20
00:01:16.800 --> 00:01:19.657
Давайте что-нибудь напишем.

21
00:01:19.657 --> 00:01:24.252
Обычно начинают программирование с Hello,
world!

22
00:01:24.252 --> 00:01:26.784
(«Здравствуй, мир!»).

23
00:01:26.784 --> 00:01:28.760
Именно это мы и сделаем.

24
00:01:28.760 --> 00:01:34.580
На Питоне это очень просто делается,
мы пишем всего лишь одну строку: print,

25
00:01:34.580 --> 00:01:39.519
скобочки — это параметр функции,
и в кавычках ту фразу,

26
00:01:39.519 --> 00:01:41.350
которую мы хотим вывести.

27
00:01:41.350 --> 00:01:43.437
Все, больше ничего не нужно.

28
00:01:43.437 --> 00:01:46.660
И теперь нужно посмотреть,
как это работает.

29
00:01:46.660 --> 00:01:49.068
Сделаем это следующим образом.

30
00:01:49.068 --> 00:01:51.443
В меню выберем Run, и здесь — Run.

31
00:01:51.443 --> 00:01:55.804
Можем запомнить, какие кнопки нужно
нажать — у нас это Alt Shift F10,

32
00:01:55.804 --> 00:02:00.378
у вас могут быть другие кнопки, — чтобы
каждый раз мышкой не ходить в это меню,

33
00:02:00.378 --> 00:02:04.760
не выбирать какой-то пункт, а нажимать
на клавиатуре, это будет быстрее.

34
00:02:04.760 --> 00:02:09.550
Можно, в принципе,
запускать и с помощью команды Debug,

35
00:02:09.550 --> 00:02:14.527
пока что разницы для вас нет,
но потом она появится.

36
00:02:14.527 --> 00:02:18.800
Итак, мы нажали Run,
у нас появилось окошко, где нужно выбрать,

37
00:02:18.800 --> 00:02:20.508
что именно мы будем запускать.

38
00:02:20.508 --> 00:02:22.610
Выбираем наш проект test и запускаем.

39
00:02:22.610 --> 00:02:27.911
Снизу появляется окно,
вот я выделил наш вывод — это значит,

40
00:02:27.911 --> 00:02:31.961
что программа выполнилась и мы
можем посмотреть, что она вывела.

41
00:02:31.961 --> 00:02:34.740
И вот она вывела ту фразу,
которую мы хотели.

42
00:02:34.740 --> 00:02:39.715
Итак, каждый раз при запуске,

43
00:02:39.715 --> 00:02:44.769
если мы что-нибудь поменяем,
например фразу, и запустим заново — я

44
00:02:44.769 --> 00:02:50.592
пока не успел запомнить, какие команды
нужно нажимать, кнопки Run test.

45
00:02:50.592 --> 00:02:55.555
Теперь мы можем запускать,
уже тот файл, не выбирая заново,

46
00:02:55.555 --> 00:02:58.605
какой файл мы хотим запустить
— последний запущенный.

47
00:02:58.605 --> 00:03:03.490
Итак, вот у нас поменялся вывод,
теперь вместо world — Python.

48
00:03:03.490 --> 00:03:04.729
Отлично!

49
00:03:04.729 --> 00:03:07.760
Это мы делать научились.

50
00:03:07.760 --> 00:03:10.651
В чем удобство использования
среды разработки?

51
00:03:10.651 --> 00:03:14.643
В принципе, вы можете пользоваться
просто текстовым редактором,

52
00:03:14.643 --> 00:03:18.652
сохранять это все в блокноте и
запускать потом каким-нибудь образом из

53
00:03:18.652 --> 00:03:23.417
командной строки или из
проводника еще как-то.

54
00:03:23.417 --> 00:03:27.124
Но в интегрированной среде разработки
(так это расшифровывается — IDE) все

55
00:03:27.124 --> 00:03:29.158
сделано достаточно удобно.

56
00:03:29.158 --> 00:03:33.640
Например, если мы опечатаемся
в названии или забудем что-то,

57
00:03:33.640 --> 00:03:34.919
там сразу подчеркнет красным.

58
00:03:34.919 --> 00:03:37.569
Вот сейчас я забыл закрыть скобочку и,
видите, мне показывает,

59
00:03:37.569 --> 00:03:41.596
что здесь что-то неправильно:
скобочка открылась, но не закрылась.

60
00:03:41.596 --> 00:03:45.990
И даже подсказывает, что мне делать,
оно ожидает здесь выражения.

61
00:03:45.990 --> 00:03:48.863
Давайте попробуем вывести
что-то кроме строки,

62
00:03:48.863 --> 00:03:52.545
например посчитать какое-нибудь
арифметическое выражение.

63
00:03:52.545 --> 00:03:54.396
Это может быть любое выражение.

64
00:03:54.396 --> 00:03:59.100
Давайте для начала сделаем что-нибудь
простое, например, сложим числа 2 и 3.

65
00:03:59.100 --> 00:04:04.300
Так и пишем: print, и в скобочках: 2 + 3.

66
00:04:04.300 --> 00:04:07.965
Запускаем, и нам выводится пятерка,

67
00:04:07.965 --> 00:04:13.537
то есть результат вычисления,
а это значит, что мы можем писать,

68
00:04:13.537 --> 00:04:18.625
в общем-то, любое арифметическое выражение
и использовать Питон как калькулятор.

69
00:04:18.625 --> 00:04:20.052
Когда это бывает удобным?

70
00:04:20.052 --> 00:04:24.385
Если вы пользуетесь обычным калькулятором
с кнопками, или в Windows который встроен,

71
00:04:24.385 --> 00:04:28.263
или в вашу операционную систему,
то если выражение длинное и где-то

72
00:04:28.263 --> 00:04:31.846
вы случайно ошиблись,
то потом очень сложно вернуться.

73
00:04:31.846 --> 00:04:35.128
Но теперь вы можете написать это в Питоне,
и если где-то опечатались, просто

74
00:04:35.128 --> 00:04:41.010
поправили и запустили заново — и все эти
операции не придется делать полностью с 0.

75
00:04:41.010 --> 00:04:44.960
Программирование, кроме того,
является экспериментальной наукой,

76
00:04:44.960 --> 00:04:47.988
то есть мы можем сразу что-то
сделать и проверить это.

77
00:04:47.988 --> 00:04:52.120
Допустим, у нас возникла идея: а что
будет если мы строку сложим с числом?

78
00:04:52.120 --> 00:04:57.816
Кстати говоря, строку можно обрамлять
не только двойными кавычками,

79
00:04:57.816 --> 00:04:59.190
но и одинарными.

80
00:04:59.190 --> 00:05:02.175
Никакой разницы нету,
потом я покажу, где это нужно.

81
00:05:02.175 --> 00:05:05.620
Так, сейчас я пытаюсь вспомнить,
какие кнопки нужно нажать.

82
00:05:05.620 --> 00:05:12.967
Ага, на работает.

83
00:05:12.967 --> 00:05:17.500
Смотрите, если мы сделали что-то,
чего делать нельзя,

84
00:05:17.500 --> 00:05:20.940
то у нас вместо вывода программы
появляется вот такой текст.

85
00:05:20.940 --> 00:05:22.251
Что, в чем проблема?

86
00:05:22.251 --> 00:05:26.805
Нам сообщают, в каком файле проблема —
у нас файл один, поэтому все просто,

87
00:05:26.805 --> 00:05:31.125
— а также в какой строке ее
номер и что это за строка.

88
00:05:31.125 --> 00:05:33.298
А также сообщают, какая ошибка.

89
00:05:33.298 --> 00:05:36.363
Пока что нам, может быть,
сложно понять, что это,

90
00:05:36.363 --> 00:05:41.416
но если вдруг в процессе написания
программы у вас возникла ошибка,

91
00:05:41.416 --> 00:05:46.336
вы можете просто скопировать это текст и
поискать его в каком-нибудь поисковике.

92
00:05:46.336 --> 00:05:49.988
Наверняка, у кого-то такая ошибка уже
возникала, и кто-то подробно написал,

93
00:05:49.988 --> 00:05:52.300
что это, с примерами,
с объяснениями и так далее.

94
00:05:52.300 --> 00:05:59.440
Часто бывает, что из текста этой
ошибки сразу понятно, в чем проблема.

95
00:05:59.440 --> 00:06:01.002
В нашем случае, видимо,

96
00:06:01.002 --> 00:06:04.341
у нас не получилось сложить
между собой строку и число.

97
00:06:04.341 --> 00:06:06.666
Ничего страшного, запомним на будущее,

98
00:06:06.666 --> 00:06:09.167
что строки и числа складывать
между собой нельзя.

99
00:06:09.167 --> 00:06:13.792
Вообще говоря, не очень понятно,
чего мы ждали, но дождались ошибки.

100
00:06:13.792 --> 00:06:18.624
Теперь посмотрим на какой-нибудь
достаточно прихотливый ввод-вывод.

101
00:06:18.624 --> 00:06:23.345
Например, мы хотим наше это выражение (2
+ 3) не просто чтобы у нас напечаталось

102
00:06:23.345 --> 00:06:27.327
пятеркой — ну что такое пятерка,
человек может не разобраться,

103
00:06:27.327 --> 00:06:32.687
— оно напечаталось: 2 + 3 =, собственно,
результат вычисления этого выражения.

104
00:06:32.687 --> 00:06:36.682
В принципе, мы можем выводить
сразу несколько выражений: одно,

105
00:06:36.682 --> 00:06:40.592
два, три — сколько угодно,
главное разделять их запятыми.

106
00:06:40.592 --> 00:06:42.826
Причем они могут быть разных типов.

107
00:06:42.826 --> 00:06:45.154
Это могут быть как строки, так и числа.

108
00:06:45.154 --> 00:06:48.885
Ну вот в нашем примере мы
написали строку: 2 + 3 =,

109
00:06:48.885 --> 00:06:54.430
затем запятая и арифметическое
выражение 2 + 3.

110
00:06:54.430 --> 00:06:57.774
Запустим и посмотрим,
как это будет выглядеть.

111
00:06:57.774 --> 00:07:01.436
Смотрите, очень красиво получилось: 2,
пробел,

112
00:07:01.436 --> 00:07:05.778
+, пробел, 3, пробел, =, пробел, 5.

113
00:07:05.778 --> 00:07:11.430
Все очень здорово, но теперь нужно понять,
почему у нас так красиво все получилось.

114
00:07:11.430 --> 00:07:16.480
В моей строке после =,
после последнего символа пробела нет,

115
00:07:16.480 --> 00:07:21.400
но функция print автоматически после
каждой запятой вставляет пробел.

116
00:07:21.400 --> 00:07:26.106
Если бы мы вставили этот пробел сами,
забыли о таком свойстве функции или не

117
00:07:26.106 --> 00:07:29.970
знали его, то у нас получилось бы
— посмотрим, что — два пробела.

118
00:07:29.970 --> 00:07:34.330
Собственно, объяснение этому есть:
вместо запятой подставляется пробел.

119
00:07:34.330 --> 00:07:38.716
Посмотрим еще более красивый вывод.

120
00:07:38.716 --> 00:07:43.945
Допустим, мы хотим вывести 1 + 2

121
00:07:43.945 --> 00:07:50.000
+ 3 = результат вычисления этого
арифметического выражения.

122
00:07:50.000 --> 00:07:55.558
Но мы не будем писать все это,
а напишем только строчки "1",

123
00:07:55.558 --> 00:08:00.341
"2" и "3, а также воспользуемся
именованным параметром

124
00:08:00.341 --> 00:08:04.440
функции print — разделитель,
sep (sepatator).

125
00:08:04.440 --> 00:08:08.570
И сделаем его значком +.

126
00:08:08.570 --> 00:08:11.810
Посмотрим, что получится сейчас.

127
00:08:11.810 --> 00:08:12.606
Отлично!

128
00:08:12.606 --> 00:08:14.376
Вывелось 1 + 2 + 3.

129
00:08:14.376 --> 00:08:21.237
Если мы хотим, чтобы у нас еще
пробельчики были вокруг нашего плюсика,

130
00:08:21.237 --> 00:08:26.568
то сделаем именно такую
строку-разделитель.

131
00:08:26.568 --> 00:08:28.504
Отлично, выводится.

132
00:08:28.504 --> 00:08:33.024
И теперь мы можем вывести отдельным
print'ом результат вычисления этого

133
00:08:33.024 --> 00:08:33.820
выражения.

134
00:08:33.820 --> 00:08:40.957
Например, написать = и
арифметическое выражение.

135
00:08:40.957 --> 00:08:47.000
Теперь у нас уже две строки в программе
— это вдвое больше, чем было в прошлой.

136
00:08:47.000 --> 00:08:49.449
Посмотрим, что получается.

137
00:08:49.449 --> 00:08:52.180
Получилось почти то, что нужно,

138
00:08:52.180 --> 00:08:57.584
только у нас = результат вычисления
выражения съехал на другую строку.

139
00:08:57.584 --> 00:09:01.652
Чтобы избежать этого, можно
воспользоваться еще одним новым параметром

140
00:09:01.652 --> 00:09:05.480
по аналогии с sep, который называется end
— что будет печататься в конце строки.

141
00:09:05.480 --> 00:09:11.090
Если мы ничего не написали,
то у нас будет печататься перевод строки.

142
00:09:11.090 --> 00:09:15.128
А нас что нужно — да, в общем-то,
нам нужно пустую строку.

143
00:09:15.128 --> 00:09:18.950
Пустая строка — это просто две кавычки,
одна за другой.

144
00:09:18.950 --> 00:09:20.513
Запускаем.

145
00:09:20.513 --> 00:09:26.223
Почти хорошо, не хватает ровно
одного пробельчика после тройки.

146
00:09:26.223 --> 00:09:28.140
Это значит, что, например,

147
00:09:28.140 --> 00:09:33.690
мы можем вместо ничего сделать
пробел в качестве пустой строки.

148
00:09:33.690 --> 00:09:35.830
Запустим и посмотрим.

149
00:09:35.830 --> 00:09:40.220
Отлично, получилось ровно то,
что мы хотели.

150
00:09:40.220 --> 00:09:44.804
Что нужно запомнить о
функции print сейчас?

151
00:09:44.804 --> 00:09:48.932
Это то, что можно выводить несколько
параметров, они могут быть разные, они

152
00:09:48.932 --> 00:09:53.012
разделяются запятой, а также существуют
два именнованных параметра: sep и end,

153
00:09:53.012 --> 00:09:56.409
separator — разделитель,
и end — что будет печататься в конце.

154
00:09:56.409 --> 00:10:02.250
По умолчанию разделитель — это пробел,
а end — это перевод строки.

155
00:10:02.250 --> 00:10:09.774
В принципе, в вашей программе можно
сделать еще один print, их может быть три.

156
00:10:09.774 --> 00:10:15.406
Например, мы можем поставить
восклицательный знак.

157
00:10:15.406 --> 00:10:19.240
Или даже мы можем сделать
просто пустой print,

158
00:10:19.240 --> 00:10:24.042
который просто выведет перевод строки.

159
00:10:24.042 --> 00:10:26.386
Например, мы хотим все
испортить и сделать,

160
00:10:26.386 --> 00:10:29.160
чтобы результат вычислений
был на отдельной строке.

161
00:10:29.160 --> 00:10:31.256
Запускаем, смотрим, и, действительно,

162
00:10:31.256 --> 00:10:34.794
все испортилось — результат
вычислений стал на отдельной строке.

163
00:10:34.794 --> 00:10:37.230
Таким образом, если вы что-то забыли,

164
00:10:37.230 --> 00:10:39.783
то можете посмотреть видео
заново или прочитать текст.

165
00:10:39.783 --> 00:10:41.165
Со временем вы запомните это,

166
00:10:41.165 --> 00:10:44.160
когда будете делать много задач
с поочередным вводом-выводом.

167
00:10:44.160 --> 00:10:46.969
Ну или просто ставьтет эксперименты,
смотрите,

168
00:10:46.969 --> 00:10:51.620
что получится: ничего не сломается,
компьютер не взорвется, все будет хорошо.

169
00:10:51.620 --> 00:10:58.210
[ЗВУК]

170
00:10:58.210 --> 00:11:05.070
[ЗВУК]